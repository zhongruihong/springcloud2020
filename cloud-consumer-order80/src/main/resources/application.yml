#客户端负载均衡【轮询算法】公式：
# rest接口第n次请求数%服务器集群【同一服务名下】总数量（如8001 8002为2台） = 实际调用服务器位置下标
# list[0] instances = 127.0.0.1:8001; 
# list[1] instances = 127.0.0.1:8002; 
# list = 2 instances
# 1%2 = 1,index = 1 list.get(index)：127.0.0.1:8002;
# 2%2 = 0,index = 0 list.get(index)：127.0.0.1:8001;
# 3%2 = 1,index = 1 list.get(index)：127.0.0.1:8002;
# 4%2 = 0,index = 0 list.get(index)：127.0.0.1:8001;
#...
# 3台、4台，...，n台集群，同理
#本质就是取余！

#每次服务重启后rest接口计数从1开始 
#
server:
  port: 80

spring:  application:    name: cloud-order-service
#zipkin监控链路调用：
  zipkin:
    base-url: http://localhost:9411  #前提：要启动zipkin的jar
#sleuth采样值介于0-1之间，1表示 全部采集
  sleuth:
    sampler:
      probability: 1
#在微服务框架中，一个由客户发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后的请求结果，
#每一个前段请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或者错误都会引起整个请求最后的失败
#Spring Cloud Sleuth提供了一套完整的服务跟踪解决方案，兼容支持zipkin，一个监控，一个展现（zipkin Dashboard）
#搭建链路监控步骤：
#SpringCloud F版起就不需要自己构建Zipkin Server，只需要调用jar包即可：
#https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/
#zipkin-server-2.12.9-exec.jar
#直接cmd运行  java -jar ./zipkin-server-2.12.9-exec.jar
#访问：http://localhost:9411/
#
#Trace:类似于树结构的Span集合，表示一条调用链路，存在唯一标识 
#Span:表示 调用链路来源，通俗理解为span就是一次请求信息
#
#配置需要监控的服务yml:zipkin配置
#依次启动注册中心/8001/80（打开注解@LoadBalanced获取RestTemplate）
#访问http://localhost/consumer/get/2
eureka:
  client:
    register-with-eureka: true #将自己【服务提供者】注册进eureka server
    fetch-registry: true #是否从eureka server抓取已有的注册信息，单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    service-url:
      #defaultZone: http://localhost:7001/eureka #单机版 注册地址 
      defaultZone: http://eureka1.rui.com:7001/eureka, http://eureka2.rui.com:7002/eureka #集群版，注册地址
  instance:
    instance-id: order80 #规范主机名 ， 在注册中心的status中显示的名称；若不配置此项，status显示的是所在计算机名:应用名:端口
    prefer-ip-address: true #访问路径可显示 IP地址，鼠标悬浮注册中心的status的主机名时，左下角显示对应的ip地址
