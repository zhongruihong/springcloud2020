#bootstrap是系统级，优先加载
#SpringCloud会创建一个"BootStrap Context"，作为Spring应用的ApplicationContext的父上下文
#初始化时，BootStrapContext负责从【外部源】加载配置并解析配置。
#这两个上下文共享一个从【外部获取的】Environment!
#默认情况下，BootStrap不会被本地覆盖。
#引入bootstrap.yml保证Bootstrap Context和ApplicationContext配置的分离

server:
  port: 3355
  
eureka:  client:    register-with-eureka: true #将自己【服务提供者】注册进eureka server
    fetch-registry: true #是否从eureka server抓取已有的注册信息，单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    service-url:      #defaultZone: http://eureka1.rui.com:7001/eureka #单机版 注册地址 
      defaultZone: http://eureka1.rui.com:7001/eureka, http://eureka2.rui.com:7002/eureka #集群版，注册地址
  instance:
    instance-id: configclient3355 #规范主机名 ， 在注册中心的status中显示的名称；若不配置此项，status显示的是所在计算机名:应用名:端口
    prefer-ip-address: true #访问路径可显示 IP地址，鼠标悬浮注册中心的status的主机名时，左下角显示对应的ip地址
    #心跳检测与续约时间，开发时设置小些，保证服务关闭后注册中心能立即剔除服务！
    lease-renewal-interval-in-seconds: 1 #Eureka客户端向服务发送心跳的时间间隔，默认30秒
    lease-expiration-duration-in-seconds: 2 #Eureka服务端在收到最后一次心中后等待时间上限，默认90秒，超过该时间将剔除服务
spring:
  application:
    name: cloud-config-client #注册到注册中心的应用名称【application】对外显露调用， 在相同应用名称下可能有多个实际应用提供，可通过访问注册中心查看
  cloud:     #config客户端配置！
    config:
      label: master #master分支
      name: config2020 #配置文件名称
      profile: dev #读取后缀名称  上述3个综合：master分支上config2020-dev.yml配置文件被读取
      uri: http://localhost:3344 #config server配置中心地址
#http://localhsot:3344/master/config2020-dev.yml
#通过访问服务中心3344获取配置信息~



#暴露监控端口   pom.xml要引入 actuator!!!
#详情：https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints
management:  endpoints:    web:      exposure:
      #例如，通过HTTP公开info和health的端点，除了env和beans端点，#        include:#        - "info"
#        - "health" 
#       #不暴露beans和env端点
#        exclude:#        - env
#        - beans #打不打引号都可以?
#以上配置都是默认的~~~~~"*" 可以用来表示所有的端点，
         include:
         - "*"